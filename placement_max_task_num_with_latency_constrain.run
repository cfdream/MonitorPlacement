reset;
model placement_max_task_num_with_latency_constrain.mod;
data input.dat;
option solver cplex;
solve;
#number of nodes in the topology
display n
  >> placement_max_task_num_with_latency_constrain.output;

#number of candidate tasks
display m 
  >> placement_max_task_num_with_latency_constrain.output;

#number of candidate tasks to assign
display kk
  >> placement_max_task_num_with_latency_constrain.output;

#maximum per pair latency
display pair_max_latency
  >> placement_max_task_num_with_latency_constrain.output;

#number of flows each node can monitor(assumption: each node can monitor the same amount of flows)
display max_node_flows[1]
  >> placement_max_task_num_with_latency_constrain.output;

#number of assigned tasks
display sum {k in 1..kk} a[k]
  >> placement_max_task_num_with_latency_constrain.output;

#max latency of all monitored flows
display (sum {k in 1..kk, s in 1..m, t in 1..m} 
            ( a[k] * task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t] * (sum{i in 1..n, j in 1..n} g[s,i] * g[t,j] * latency[i,j])))
  >> placement_max_task_num_with_latency_constrain.output;

#number of assigned pairs of assigned tasks
#display (sum {k in 1..kk, s in 1..m, t in 1..m} 
#             ( a[k] * task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t] ))
#  >> placement_max_task_num_with_latency_constrain.output;
