reset;
model placement_max_task_num_with_latency_constrain.mod;
data input.dat;
option solver cplex;
solve;
#number of nodes in the topology
display n
  >> placement_max_task_num_with_latency_constrain.output;

#number of candidate tasks
display m 
  >> placement_max_task_num_with_latency_constrain.output;

#number of candidate tasks to assign
display kk
  >> placement_max_task_num_with_latency_constrain.output;

#maximum per pair latency
display pair_max_latency
  >> placement_max_task_num_with_latency_constrain.output;

#number of flows each node can monitor(assumption: each node can monitor the same amount of flows)
display max_node_flows[1]
  >> placement_max_task_num_with_latency_constrain.output;

#number of assigned tasks
display sum {k in 1..kk} a[k]
  >> placement_max_task_num_with_latency_constrain.output;

#average (avg latency of one task) for all tasks
display sum {k in 1..kk} (
             (a[k] * sum{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t] * selector_monitor_map_latency[s,t]))
             / max(1, a[k] * (sum{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t])))
         )
        /
        (max(sum {x in 1..kk} a[x], 1))
  >> placement_max_task_num_with_latency_constrain.output;

#average (max latency of one task) for all tasks
display sum {k in 1..kk} 
             (a[k] * max{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t] * selector_monitor_map_latency[s,t]))
        /
        (max(sum {x in 1..kk} a[x], 1))
  >> placement_max_task_num_with_latency_constrain.output;

##average latency of all assigned tasks. The latency of one task is the mean latency between all pairs of this task
##for each task, get its average latency first. then get the sum of all assigned tasks; Finally divide the number of assigned tasks
#             #/ (max(1, a[k] * (sum{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t]))))
#display sum {k in 1..kk} (
#             (a[k] * sum{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t] * (sum{i in 1..n, j in 1..n} g[s,i] * g[t,j] * latency[i,j])))
#             / max(1, a[k] * (sum{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t])))
#         )
#        /
#        (max(sum {x in 1..kk} a[x], 1))
#  >> placement_max_task_num_with_latency_constrain.output;

##average largest latency of each task
##for each assigned task, get its max latency between all pairs. then get the sum of all assigned tasks; Finally divide the number of assigned tasks
#display sum {k in 1..kk} 
#             (a[k] * max{s in 1..m, t in 1..m} (task_has_module[k,s] * task_has_module[k,t] * selector_monitor_map[s,t] * (sum{i in 1..n, j in 1..n} g[s,i] * g[t,j] * latency[i,j])))
#        /
#        (max(sum {x in 1..kk} a[x], 1))
#  >> placement_max_task_num_with_latency_constrain.output;
